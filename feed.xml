<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2022-06-13T07:43:32+00:00</updated><id>/blog/feed.xml</id><title type="html">기초부터 탄탄히</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>김재연</name></author><entry><title type="html">Google java style guide IntelliJ에 적용하기</title><link href="/blog/tdd,/cleancode/2022/05/27/google-java-style-guide-intellij.html" rel="alternate" type="text/html" title="Google java style guide IntelliJ에 적용하기" /><published>2022-05-27T00:00:00+00:00</published><updated>2022-05-27T00:00:00+00:00</updated><id>/blog/tdd,/cleancode/2022/05/27/google-java-style-guide-intellij</id><content type="html" xml:base="/blog/tdd,/cleancode/2022/05/27/google-java-style-guide-intellij.html"><![CDATA[<p><a href="https://google.github.io/styleguide/javaguide.html">google java style guide</a></p>

<ol>
  <li>
    <p><a href="https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml">https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml</a> 
에서 파일을 다운 받는다.</p>
  </li>
  <li>
    <p>Preferences -&gt; Editor -&gt; Code Style -&gt; JAVA -&gt; scheme 선택지 옆 아이콘 클릭 
-&gt; Import Scheme -&gt; IntelliJ IDEA code style scheme -&gt; 다운받은 파일 선택</p>
  </li>
  <li>
    <p>Tab and Indents에서 Tab size와 Indent 2 -&gt; 4로 수정</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">option</code> + <code class="language-plaintext highlighter-rouge">command</code> + <code class="language-plaintext highlighter-rouge">L</code> 단축키로 자동정렬 사용</p>
  </li>
</ol>

<blockquote>
  <p>참고
https://velog.io/@injoon2019/IntelliJ에-Google-Java-Style-Guide-적용하기</p>
</blockquote>]]></content><author><name>jyKim</name></author><category term="TDD," /><category term="CleanCode" /><category term="JAVA" /><summary type="html"><![CDATA[google java style guide]]></summary></entry><entry><title type="html">Google java style guide</title><link href="/blog/tdd,/cleancode/2022/05/25/google-java-style-guide.html" rel="alternate" type="text/html" title="Google java style guide" /><published>2022-05-25T00:00:00+00:00</published><updated>2022-05-25T00:00:00+00:00</updated><id>/blog/tdd,/cleancode/2022/05/25/google-java-style-guide</id><content type="html" xml:base="/blog/tdd,/cleancode/2022/05/25/google-java-style-guide.html"><![CDATA[<p><a href="https://google.github.io/styleguide/javaguide.html">원본 문서</a></p>

<h2 id="1-도입">1 도입</h2>

<p>이 문서는 구글의 java 프로그래밍 언어 소스코드를 위한 코딩 표준의 <code class="language-plaintext highlighter-rouge">완전한</code> 정의이다.<br />
java 소스 파일은 여기에 있는 규칙을 준수해야만 구글 스타일을 따르는 것으로 설명된다.</p>

<p>다른 프로그래밍 스타일 가이드 처럼, 서식의 미적인 주제 뿐만 아니라 다른 유형의 컨벤션 혹은 코딩 표준에 대한 영역을 다룬다.<br />
하지만, 이 문서는 우리가 보편적으로 따르는 <code class="language-plaintext highlighter-rouge">엄격하고 빠른 규칙</code>에 우선적으로 집중하고 있으며 명확하게 시행할 수 없는 조언은 제공하지 않는다(사람이든 툴이든).</p>

<h3 id="11-용어-설명">1.1 용어 설명</h3>

<p>따로 명시되지 않는 한 이 문서에서는:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">class</code>는 “일반” class, enum class, interface나 어노테이션 타입(@interface)를 의미하는 데 포괄적으로 사용된다.</li>
  <li>(class의) <code class="language-plaintext highlighter-rouge">member</code>는 포괄적으로 내부 class, field, method, 혹은 constructor를 의미하는 데 포괄적으로 사용된다. 즉, initializer와 주석을 제외한 class의 모든 최상위 요소들이다.</li>
  <li><code class="language-plaintext highlighter-rouge">comment(주석)</code>는 항상 구현 주석을 의미한다. “문서 주석”이라는 구문은 사용하지 않고 일반적인 용어인 “javadoc”을 사용한다.</li>
</ol>

<p>문서에 가끔 다른 “용어 설명”이 나타난다.</p>

<h3 id="12-가이드-설명">1.2 가이드 설명</h3>
<p>이 문서의 예시 코드는 비표준이다. 즉, 예시는 구글 스타일이지만 코드를 표현하는 유일한 세련된 방법을 설명하지 않을 수 있다. 
예제에서 나타난 선택적 서식은 규칙으로 주장되어서는 안된다.</p>

<h2 id="2-소스-파일-기본">2 소스 파일 기본</h2>

<h3 id="21-파일명">2.1 파일명</h3>

<p>소스 파일의 이름은 그것이 포함한 최상위의 class(반드시 하나 존재)의 대소문자를 구분한 이름과 .java 확장자로 구성된다.</p>

<h3 id="22-파일-인코딩--utf-8">2.2 파일 인코딩 : UTF-8</h3>

<p>소스파일은 <code class="language-plaintext highlighter-rouge">UTF-8</code>로 인코딩한다.</p>

<h3 id="23-특수-문자">2.3 특수 문자</h3>

<h4 id="231-공백-문자">2.3.1 공백 문자</h4>

<p>줄바꿈 문자열을 제외하고 ASCII 가로 공백 문자(Ox20)는 소스 파일의 어디에나 나타날 수 있는 유일한 공백 문자이다.<br />
이것은 다음을 함축한다 :</p>

<ol>
  <li>문자열과 문자(character literals)의 다른 모든 공백 문자는 escape 된다.</li>
  <li>Tab 문자는 들여쓰기로 사용되지 않는다.</li>
</ol>

<h4 id="232-특수-escape-문자열">2.3.2 특수 escape 문자열</h4>

<p><a href="https://docs.oracle.com/javase/tutorial/java/data/characters.html">특수 escape 문자열</a> 
(\b, \t, \n, \f, \r, ", ' , \)을 가진 모든 문자는 8진수 escape(e.g. \012)나 유니코드 escape(e.g. \u000a) 대신 사용된다.</p>

<h4 id="233-non-ascii-문자">2.3.3 Non-ASCII 문자</h4>

<p>나머지 Non-ASCII 문자들은 실제 유니코드 문자(e.g. ∞) 혹은 그에 상응하는 유니코드 escape(e.g. \u221e)가 사용된다.<br />
문자열 literal과 주석 밖에서는 유니코드 escape를 사용하는 것은 강력히 권장되지 않지만 선택은 오직 어떤 것이 코드를 쉽게 읽고 이해할 수 있게 만드는지에 달려있다.</p>

<h2 id="3-소스-파일-구조">3 소스 파일 구조</h2>

<p>소스 파일은 아래와 같은 <code class="language-plaintext highlighter-rouge">순서</code>로 구성된다:</p>
<ol>
  <li>있는 경우라면, 라이센스 혹은 저작권 정보</li>
  <li>package</li>
  <li>import</li>
  <li>정확히 하나의 최상위 class</li>
</ol>

<p>각각의 구간을 구분하기 위해 <strong>정확히 한 줄의 공백</strong>이 사용된다.</p>

<h3 id="31-있는-경우라면-라이센스-혹은-저작권-정보">3.1 있는 경우라면, 라이센스 혹은 저작권 정보</h3>

<p>라이센스나 저작권 정보가 파일에 포함된다면 이 위치에 포함 시킨다.</p>

<h3 id="32-package">3.2 package</h3>

<p>package문은 <strong>줄바꿈 하지 않는다</strong>. 열 제한(섹션 4.4)이 적용되지 않는다.</p>

<h3 id="33-import">3.3 Import</h3>

<h4 id="331-와일드카드를-사용하지-않는다">3.3.1 와일드카드를 사용하지 않는다.</h4>

<p>static이든 아니든 <strong>와일드카드 import는 사용하지 않는다</strong>.</p>

<h4 id="332-줄바꿈하지-않음">3.3.2 줄바꿈하지 않음</h4>

<p>import문은 <strong>줄바꿈 하지 않는다</strong>. 열 제한(섹션 4.4)이 적용되지 않는다.</p>

<h4 id="333-순서와-공간">3.3.3 순서와 공간</h4>
<p>import는 다음 순서를 따른다:</p>
<ol>
  <li>한 블록의 모든 static import</li>
  <li>한 블록의 모든 non-static import</li>
</ol>

<p>만약 static import와 non-static import가 둘 다 있다면, 공백 한 줄이 두 블록을 구분한다. import문 사이에 다른 공백 줄은 허용되지 않는다.</p>

<p>각 블록 내에서는 import된 이름이 ASCII 순서로 나타난다. (참고 : ‘.’이 ‘;’ 앞에 오기 때문에 ASCII 정렬 순서인 import문과는 다르다.)…?</p>

<h4 id="334-class는-static-import-하지-않음">3.3.4 class는 static import 하지 않음</h4>

<p>중첩 static class를 불러오기 위해 static import를 사용하지 않는다. 일반 import로 불러온다.</p>

<h3 id="34-class-선언">3.4 class 선언</h3>

<h4 id="341-정확히-하나의-최상위-class-선언">3.4.1 정확히 하나의 최상위 class 선언</h4>

<p>각 최상위 class는 자체 소스파일 안에 있다.</p>

<h4 id="342-class-요소의-정렬">3.4.2 class 요소의 정렬</h4>

<p>member와 initializer의 순서 선택은 학습능력에 큰 영향을 줄 수 있다. 하지만, 그에 대한 하나의 올바른 정답은 없다. 서로 다른 class는 다른 방식으로 정렬될 수 있다.</p>

<p>중요한 것은 각 class가 관리자가 설명할 수 있는 어떤 논리적인 순서를 사용하는 것이다.<br />
예를 들어, 새로운 method는 단지 습관적으로 class의 맨 끝에 추가되면 안된다. 이는 논리적인 순서가 아닌 “추가된 날짜 기준” 정렬이기 때문이다.</p>

<h5 id="3421-오버로드-절대-분리하지-않음">3.4.2.1 오버로드: 절대 분리하지 않음</h5>

<p>이름을 공유하는 method는 사이에 다른 구성원이 없는 단일 연속 그룹에 나타난다. 
항상 같은 이름을 갖는 생성자 역시 똑같이 적용된다. 이 규칙은 static 혹은 private 등의 수정자가 다른 method 사이에서도 적용된다.</p>

<h2 id="4-서식">4 서식</h2>

<p>용어 설명: <code class="language-plaintext highlighter-rouge">블록 형식의 구조(block-like construct)</code>는 class, method 혹은 constructor의 본문을 나타낸다. 
섹션 4.8.3.1과 같이 모든 배열 초기화 블록은 선택적으로 블록 형식의 구조처럼 다뤄질 수 있다.</p>

<h3 id="41-중괄호">4.1 중괄호</h3>

<h4 id="411-선택적-중괄호-사용">4.1.1 선택적 중괄호 사용</h4>

<p>본문이 비어있거나 오직 하나의 구문을 포함하는 경우에도 <code class="language-plaintext highlighter-rouge">if, else, for, do, while</code>문과 함께 중괄호가 사용된다.</p>

<p>람다 표현식과 같은 다른 선택적 중괄호는 여전히 선택가능하다.</p>

<h4 id="412-비어있지-않은-블록-k--r-style">4.1.2 비어있지 않은 블록: K &amp; R style</h4>

<p>중괄호는 비어있지 않은 블록과 블록 형식의 구조에 대하여 Kernighan and Ritchie style (“Egyptian brackets”)을 따른다.:</p>

<ul>
  <li>아래의 세부 내용을 제외하고는 여는 중괄호 이전에 줄바꿈이 없다.</li>
  <li>여는 중괄호 다음에 줄바꿈.</li>
  <li>닫는 중괄호 앞에 줄바꿈.</li>
  <li>중괄호가 구문을 종료하거나 method, constructor, named class의 본문을 종료하는 경우, 닫는 중괄호 뒤에 줄바꿈을 한다. 
예를 들어 else나 ‘,’가 뒤에 따라오는 경우에는 중괄호 뒤에 줄바꿈하지 않는다.</li>
</ul>

<p>예외: 세미콜론(;)으로 끝나는 하나의 명령문에 적용되는 경우 명령문 블록이 나타날 수 있고 이 블록의 여는 중괄호 앞에 줄바꿈이 온다. 
이런 블록들은 일반적으로 지역변수의 범위를 제한하기 위해 도입된다(예: switch문 내부).</p>

<p>예시:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
  <span class="k">while</span> <span class="o">(</span><span class="n">condition</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">method</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">};</span>

<span class="k">return</span> <span class="k">new</span> <span class="nf">MyClass</span><span class="o">()</span> <span class="o">{</span>
  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">())</span> <span class="o">{</span>
      <span class="k">try</span> <span class="o">{</span>
        <span class="n">something</span><span class="o">();</span>
      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ProblemException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">recover</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">otherCondition</span><span class="o">())</span> <span class="o">{</span>
      <span class="n">somethingElse</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
      <span class="n">lastThing</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="o">{</span>
      <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">foo</span><span class="o">();</span>
      <span class="n">frob</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">};</span>
</code></pre></div></div>

<p>섹션 4.8.1에 enum class와 관련된 예외가 있다.</p>

<h4 id="413-빈블록-간결화-가능">4.1.3 빈블록: 간결화 가능</h4>

<p>빈 블록이나 블록 형식 구조는 K &amp; R style을 따를 수 있다. 
다중 블록 구문(if/else 혹은 try/catch/finally는 직접적으로 다중 블록을 포함한다.)의 한 부분이 아니라면, 괄호를 연 즉시 아무 문자는 줄바꿈이 없는 채로 바로 닫을 수 있다({}).</p>

<p>예시:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// This is acceptable</span>
  <span class="kt">void</span> <span class="nf">doNothing</span><span class="o">()</span> <span class="o">{}</span>

  <span class="c1">// This is equally acceptable</span>
  <span class="kt">void</span> <span class="nf">doNothingElse</span><span class="o">()</span> <span class="o">{</span>
  <span class="o">}</span>

  <span class="c1">// This is not acceptable: No concise empty blocks in a multi-block statement</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">doSomething</span><span class="o">();</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
</code></pre></div></div>

<h3 id="42-블록-들여쓰기-2-spaces">4.2 블록 들여쓰기: +2 spaces</h3>

<p>새로운 블록이나 블록 형식 구조가 시작되면 항상 들여쓰기가 2 spaces 만큼 증가한다. 
블록이 끝나면 들여쓰기는 이전 들여쓰기 수준으로 돌아간다. 
들여쓰기 수준은 블록 내 모든 코드와 주석에 적용된다.</p>

<h3 id="43-한-줄에-한-명령문">4.3 한 줄에 한 명령문</h3>

<p>각 명령문뒤에는 줄바꿈이 따라온다.</p>

<h3 id="44-열-제한-100">4.4 열 제한: 100</h3>

<p>자바 코드는 100 문자의 열 제한을 가진다. “문자”는 모든 유니코드의 코드 포인트를 의미한다. 
아래 명시된 사항을 제외하고, 이 제한을 초과하는 모든 줄은 섹션 4.5에서 설명하는 대로 줄바꿈하여야한다.</p>

<p>*) 각 유니코드의 코드 포인트는 표시 너비가 더 크거나 작더라도 하나의 문자로 계산된다. 
예를 들어 전각문자를 사용한다면, 규칙에서 엄격하게 요구하는 것보다 앞서 줄바꿈 하는 것을 선택 할 수 있다.</p>

<p>예외:</p>
<ol>
  <li>열 제한을 준수할 수 없는 행(예: javadoc의 긴 URL 또는 긴 JSNI method 참조)</li>
  <li>package와 import 명령문(섹션 3.2, 3.3)</li>
  <li>shell에 복사 붙여넣기 가능한 주석의 명령줄</li>
  <li>매우 긴 식별자가 드물게 호출될 때 열 제한을 초과 할 수 있다. 
이 경우 주변 코드에 대한 유효한 래핑은 <a href="https://github.com/google/google-java-format">google-java-format</a> 에 의해 생성된 것과 같다.</li>
</ol>

<h3 id="45-줄바꿈">4.5 줄바꿈</h3>

<p>용어 설명: 합리적으로 한 줄을 차지할 수 있는 코드를 여러줄로 나누는 것을 줄바꿈이라고 한다.</p>

<p>모든 상황에서 어떻게 줄바꿈이 이루어져야하는지 보여주는 포괄적이고 결정적인 공식은 없다. 
매우 자주 같은 코드 조각에 대한 여러가지 유효한 줄바꿈 방식이 있다.</p>

<blockquote>
  <p>참고: 줄바꿈의 일반적인 이유는 열 제한을 넘는 것을 피하는 것이지만, 코드가 열 제한에 적합하더라도 작성자의 재량에 따라 줄바꿈될 수 있다.</p>
</blockquote>

<blockquote>
  <p>팁: method 또는 지역변수를 추출하는 것은 줄바꿈 할 필요 없이 문제를 해결할 수 있다.?</p>
</blockquote>

<h4 id="451-줄-중단-위치">4.5.1 줄 중단 위치</h4>

<p>줄바꿈의 주요 지침은 더 높은 구문 수준에서 줄을 중단하는 것이다. 또한:</p>

<ol>
  <li>비 할당 연산자(할당 연산자가 아닌 연산자)에서 줄이 중단되면 해당 기호 앞에서 줄이 중단된다. 
(이는 C++과 JavaScript 등 다른 언어에 대한 구글 스타일에서 사용되는 것과는 다른 방식이다.)
    <ul>
      <li>이것은 또한 다음의 “유사 연산자” 기호에도 적용된다:
        <ul>
          <li>구분 점 (<code class="language-plaintext highlighter-rouge">.</code>)</li>
          <li>메소드 참조에 대한 두 콜론 (<code class="language-plaintext highlighter-rouge">::</code>)</li>
          <li>유형 제한에서의 앰퍼샌드 (<code class="language-plaintext highlighter-rouge">&lt;T extends Foo &amp; Bar&gt;</code>)</li>
          <li>catch 블록에서의 파이프 (<code class="language-plaintext highlighter-rouge">catch (FooException | BarException e</code>)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>할당 연산자에서 줄이 중단되면 일반적으로 기호 뒤에 줄 바꿈이 오지만 두 방법 다 허용된다.
    <ul>
      <li>이것은 향상된 for문(“foreach”)의 “유사 할당 연산자” 콜론에도 적용된다.</li>
    </ul>
  </li>
  <li>method나 constructor 이름은 그 뒤에 오는 여는 괄호(<code class="language-plaintext highlighter-rouge">(</code>)와 연결된다.</li>
  <li>쉼표(<code class="language-plaintext highlighter-rouge">,</code>)는 앞에 오는 토큰과 연결된다.</li>
  <li>람다의 본문이 중괄호가 없는 단일 표현식으로 구성된 경우 화살표 바로 뒤에 줄바꿈이 올 수 있다는 점을 제외하고 람다의 화살표 인근에서 
줄바꿈이 오지 않는다. 예:</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MyLambda</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Long</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span>
    <span class="o">(</span><span class="nc">String</span> <span class="n">label</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">value</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">};</span>

<span class="nc">Predicate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="n">str</span> <span class="o">-&gt;</span>
    <span class="n">longExpressionInvolving</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</code></pre></div></div>

<blockquote>
  <p>참고: 줄바꿈의 주 목표는 코드를 반드시 가장 적은 수의 줄에 맞추는 것이 아니라 코드를 명확하게 유지하는 것이다.</p>
</blockquote>

<h4 id="452-연속된-줄의-들여쓰기-최소-4-공백">4.5.2 연속된 줄의 들여쓰기 최소 +4 공백</h4>

<p>줄바꿈 시 첫번째 줄(각 연속된 줄)은 적어도 원래 줄보다 +4 들여쓰기된다.</p>

<p>여러 개의 연속된 줄이 있는 경우, 원하는대로 +4이상 들여쓰기 할 수 있다. 
일반적으로 두 연속 줄은 구문상 병렬 요소로 시작하는 경우에만 동일한 들여쓰기 수준을 사용한다.</p>

<p>수평 정렬에 대한 섹션 4.6.3은 이전 줄과 특정 토큰을 정렬하기 위해 다양한 수의 공백을 사용하는 권장되지 않는 관행을 다룬다.</p>

<h3 id="46-공백">4.6 공백</h3>

<h4 id="461-세로-공백">4.6.1 세로 공백</h4>

<p>하나의 빈 줄이 항상 나타난다:</p>

<ol>
  <li>class의 연속 member 혹은 initializer 사이: field, constructor, method, 중첩 class, 정적 initializer, instance initializer
    <ul>
      <li>예외: 두 개의 연속 field 사이(그 사이에 다른 코드가 없는 경우) 빈 줄은 선택사항이다. 
이러한 빈 줄은 필드의 field의 논리적 그룹을 만드는 데에 필요에 따라 사용된다.</li>
      <li>예외: enum 상수 사이의 빈 줄에 대해서는 섹션 4.8.1에서 다룬다.</li>
    </ul>
  </li>
  <li>이 문서의 다른 섹션(섹션3, 섹션3.3)이 요구하는 바를 따른다.</li>
</ol>

<p>하나의 빈 줄은 또한 가독성을 높이기 위해 어디서든 사용될 수 있다. 
예를 들어 코드를 논리적인 하위 섹션으로 구성하기 위해 명령문 사이에 사용할 수 있다. 
첫번째 member나 initializer 앞이나 클래스의 마지막 member 혹은 initializer 뒤에 오는 빈 줄은 권장하거나 권장하지 않는다.?</p>

<p>연속적인 여러 빈 줄은 허용되지만 필수(또는 권장)는 아니다.</p>

<h4 id="462-가로-공백">4.6.2 가로 공백</h4>

<p>언어 또는 다른 스타일 규칙에서 요구하는 곳을 넘어, literal, 주석, javadoc을 제외하고, 단일 ASCII 공백이 또한 다음의 위치에만 나타난다.</p>

<ol>
  <li>if, for, catch 같은 예약어를 해당 줄에 따라오는 여는 괄호(<code class="language-plaintext highlighter-rouge">(</code>)와 분리</li>
  <li>else나 catch 같은 예약어를 해당 줄에서 앞에오는 닫는 중괄호(<code class="language-plaintext highlighter-rouge">}</code>)와 분리</li>
  <li>여는 중괄호(<code class="language-plaintext highlighter-rouge">{</code>) 앞에, 두가지 예외:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@SomeAnnotation({a,b})</code> (공백이 사용되지 않음)</li>
      <li><code class="language-plaintext highlighter-rouge">String[][] x = {{"foo"}};</code> (아래 9 항목에 따라, <code class="language-plaintext highlighter-rouge">{{</code> 사이에 공백이 필요하지 않음)</li>
    </ul>
  </li>
  <li>이항 또는 삼항 연산자 양 옆. 이것은 또한 아래의 “유사 연산자” 기호에도 적용된다:
    <ul>
      <li>결합형 타입 한정 내에서의 앰퍼샌드: <code class="language-plaintext highlighter-rouge">&lt;T extends Foo &amp; Bar&gt;</code></li>
      <li>다수의 예외를 다루는 catch 블록의 파이프: <code class="language-plaintext highlighter-rouge">catch (FooException | BarEcveption e)</code></li>
      <li>향상된 for문(“foreach”)안의 콜론(<code class="language-plaintext highlighter-rouge">:</code>)</li>
      <li>람다 표현식 안의 화살표: <code class="language-plaintext highlighter-rouge">(String str) -&gt; str.length()</code></li>
    </ul>

    <p>아래의 경우에는 공백이 사용되지 않는다.</p>
    <ul>
      <li>method 참조의 두 콜론(<code class="language-plaintext highlighter-rouge">::</code>), <code class="language-plaintext highlighter-rouge">Object::toString</code>의 형태로 쓰인다.</li>
      <li>점 구분자(<code class="language-plaintext highlighter-rouge">.</code>), <code class="language-plaintext highlighter-rouge">object.toString()</code>의 형태로 쓰인다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">,:;</code>의 뒤 혹은 형 변환의 닫는 괄호(<code class="language-plaintext highlighter-rouge">)</code>) 뒤</li>
  <li>내용과 주석을 시작하는 이중 슬래시(<code class="language-plaintext highlighter-rouge">//</code>) 사이. 다수의 공백 허용.</li>
  <li>주석을 시작하는 이중 슬래시(<code class="language-plaintext highlighter-rouge">//</code>)와 주석 글귀 사이. 다수의 공백 허용.</li>
  <li>type과 변수선언 사이: <code class="language-plaintext highlighter-rouge">List&lt;String&gt; list</code></li>
  <li>배열 initializer의 두 중괄호 내부는 선택이다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">new int[] {5, 6}</code>, `new int[] { 5, 6 } 모두 허용된다.</li>
    </ul>
  </li>
  <li>type annotation과 <code class="language-plaintext highlighter-rouge">[]</code> 나 <code class="language-plaintext highlighter-rouge">...</code> 사이</li>
</ol>

<p>이 규칙은 줄의 시작이나 끝에서 추가 공백을 요구하거나 금지하는 것으로 해석되지 않으며 오직 내부 공간에 대한 것이다.</p>

<h4 id="463-수평정렬-필요-없음">4.6.3 수평정렬: 필요 없음</h4>

<p>용어 설명: 수평정렬은 특정 토큰이 앞줄의 특정 토큰 바로 아래 위치시키기 위해 코드에 추가적인 공백을 더하는 관행이다.</p>

<p>이 관행은 허용되지만 Google Style에서 필요하지 않다. 
이미 사용하던 곳에서 조차 수평정렬을 유지할 필요가 없다.</p>

<p>정렬이 없다가 정렬을 사용한 예시:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">int</span> <span class="n">x</span><span class="o">;</span> <span class="c1">// 괜찮다</span>
<span class="kd">private</span> <span class="nc">Color</span> <span class="n">color</span><span class="o">;</span> <span class="c1">// 이것 또한</span>

<span class="kd">private</span> <span class="kt">int</span>   <span class="n">x</span><span class="o">;</span>      <span class="c1">// 허용되지만 추후 수정</span>
<span class="kd">private</span> <span class="nc">Color</span> <span class="n">color</span><span class="o">;</span>  <span class="c1">// 정렬되지 않은 상태로 둘 수 있다.</span>
</code></pre></div></div>

<blockquote>
  <p>팁: 정렬은 가독성에 도움이 되지만 추후 유지관리에 문제를 만든다. 
단 한줄만 건드릴 필요가 있는 미래의 변화를 고려해라. 
이 변화는 이전에 만족스러웠던 서식을 망칠 수 있고 이는 허용된다. 
보다 자주 이것은 코더(아마 당신)가 근처 줄의 공백 또한 조정하도록 촉진하며, 어쩌면 연쇄적인 재형식화를 유발할 수 있다. 
이 한 줄의 변화는 이제 “폭발 반경”을 갖는다. 
이것의 최악의 결과는 무의미한 바쁜 작업이 될 수 있다. 
하지만 기껏해야 버전 기록 정보를 손상시키고 검토자의 속도를 늦추며 병합충돌을 악화시킬 뿐이다.</p>
</blockquote>

<h3 id="47-그룹화-괄호-권장">4.7 그룹화 괄호: 권장</h3>

<p>선택적 그룹화 괄호는 작성자와 검토자가 그것이 없어도 코드가 오해되거나 그것이 코드의 가독성에 도움을 줄 합리적인 여지가 없다고 동의할때만 생략된다. 
모든 독자가 모든 java 연산자의 우선순의 테이블을 기억하고 있다고 가정하는 것은 합리적이지 않다.</p>

<h3 id="48-특수-구조">4.8 특수 구조</h3>

<h4 id="481-enum-class">4.8.1 Enum class</h4>

<p>enum 상수 뒤에 오는 각 콤마 뒤 줄바꿈은 선택이다. 
추가적인 빈 줄(보통은 한 줄) 또한 허용된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">enum</span> <span class="nc">Answer</span> <span class="o">{</span>
  <span class="no">YES</span> <span class="o">{</span>
    <span class="nd">@Override</span> <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="s">"yes"</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">},</span>

  <span class="no">NO</span><span class="o">,</span>
  <span class="no">MAYBE</span>
<span class="o">}</span>
</code></pre></div></div>

<p>method와 상수에 대한 documentation이 없는 enum class는 선택적으로 배열 initializer(섹션 4.8.3.1)와 같은 형태를 가질 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">enum</span> <span class="nc">Suit</span> <span class="o">{</span> <span class="no">CLUBS</span><span class="o">,</span> <span class="no">HEARTS</span><span class="o">,</span> <span class="no">SPADES</span><span class="o">,</span> <span class="no">DIAMONDS</span> <span class="o">}</span>
</code></pre></div></div>

<p>enum class는 class이기 때문에, class 서식에 대한 모든 다른 규칙들이 적용된다.</p>

<h4 id="482-변수-선언">4.8.2 변수 선언</h4>

<h5 id="4821-한-선언에-한-변수">4.8.2.1 한 선언에 한 변수</h5>

<p>모든 변수 선언 (field나 local) 오직 하나의 변수만 선언한다: <code class="language-plaintext highlighter-rouge">int a, b;</code> 같은 선언은 사용되지 않는다.</p>

<p>예외: <code class="language-plaintext highlighter-rouge">for</code> 루프의 헤더에서는 다중 변수 선언이 허용된다.</p>

<h5 id="4822-필요할-때-선언">4.8.2.2 필요할 때 선언</h5>

<p>지역변수는 습관적으로 그것이 포함하는 블록 또는 유사 블록 구조의 시작부분에 선언되지 않는다. 
대신, 지역변수는 그 범위를 최소화하기 위해 그것이 처음으로 사용되는 곳 가까이 선언된다. 
지역변수 선언은 일반적으로 initializer를 가지거나 선언된 직후 초기화된다.</p>

<h4 id="483-배열">4.8.3 배열</h4>

<h5 id="4831-배열-initializer-유사-블록이-될-수-있음">4.8.3.1 배열 initializer: “유사 블록”이 될 수 있음</h5>

<p>모든 배열 initializer는 선택적으로 “유사 블록 구조”와 같은 형식을 가질 수 있다. 
예를 들어 다음의 코드는 유효하다(전체 목록 아님):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span>           <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span>
  <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span>            <span class="mi">0</span><span class="o">,</span>
  <span class="o">}</span>                       <span class="mi">1</span><span class="o">,</span>
  <span class="mi">2</span><span class="o">,</span>
  <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span>             <span class="mi">3</span><span class="o">,</span>
  <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span>               <span class="o">}</span>
  <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span>
  <span class="o">}</span>                     <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span>
  <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">}</span>
</code></pre></div></div>

<h5 id="4832-c-스타일의-배열-선언-미사용">4.8.3.2 C 스타일의 배열 선언 미사용</h5>

<p>대괄호는 변수가 아닌 타입에 붙는다: <code class="language-plaintext highlighter-rouge">String args[]</code> 말고 <code class="language-plaintext highlighter-rouge">String[] args</code>를 사용</p>

<h4 id="484-switch-문">4.8.4 switch 문</h4>

<p>용어 설명: switch 블록의 중괄호 내부에는 하나 이상의 구문 묶음이 있다. 
각 묶음은 하나 이상의 구문(마지막 묶음의 경우 0개 이상의 구문)이 따라오는 하나 이상의 switch 표지(<code class="language-plaintext highlighter-rouge">case Foo:</code> 또는 <code class="language-plaintext highlighter-rouge">default:</code>)로 이루어진다.</p>

<h5 id="4841-들여쓰기">4.8.4.1 들여쓰기</h5>

<p>다른 블록과 마찬가지로 switch 블록의 내용은 +2 들여쓰기한다.</p>

<p>switch 표지 뒤에는 줄바꿈을 하고 블록을 여는 것처럼 들여쓰기 수준이 +2만큼 증가한다. 
따라오는 switch 표지는 블록이 닫힌 것 처럼 이전 들여쓰기 수준으로 돌아간다.</p>

<h5 id="4842-fall-through-주석">4.8.4.2 fall-through: 주석</h5>

<p>switch 블록 내부에서 각 구문 묶음은 즉시 종료되거나(<code class="language-plaintext highlighter-rouge">break</code>, <code class="language-plaintext highlighter-rouge">continue</code>, <code class="language-plaintext highlighter-rouge">return</code>, 예외 발생과 함께) 
실행이 다음 명령문 묶음으로 계속될 수 있음을 나타내기 위한 주석으로 표시된다. 
fall-through에 대한 아이디어를 전달하는 모든 주석이 허용된다(일반적으로 <code class="language-plaintext highlighter-rouge">// fall through</code>). 
이 특별한 주석은 switch 블록의 마지막 구문 묶음에서는 필요하지 않다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="o">(</span><span class="n">input</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
  <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
    <span class="n">prepareOneOrTwo</span><span class="o">();</span>
    <span class="c1">// fall through</span>
  <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
    <span class="n">handleOneTwoOrThree</span><span class="o">();</span>
    <span class="k">break</span><span class="o">;</span>
  <span class="k">default</span><span class="o">:</span>
    <span class="n">handleLargeNumber</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">case 1:</code> 뒤에는 주석이 필요 없다는 점에 주목해라. 주석은 오직 구문 묶음의 마지막에 온다.</p>

<h5 id="4843-default-표지의-존재">4.8.4.3 <code class="language-plaintext highlighter-rouge">default</code> 표지의 존재</h5>

<p>각 switch문은 코드를 포함하지 않을때에도 <code class="language-plaintext highlighter-rouge">default</code> 구문 묶음을 포함한다.</p>

<p>예외: enum 타입에 대한 switch문은 해당 유형의 모든 가능한 값에 대한 명시적 경우를 포함하는 경우 default 구문 묶음이 생략될 수 있다. 
누락된 경우가 있으면 IDE 또는 기타 정적 사례 분석도구가 경고를 표시할 수 있다.</p>

<h4 id="485-annotation">4.8.5 Annotation</h4>

<h5 id="4851-타입-사용-annotation">4.8.5.1 타입 사용 annotation</h5>

<p>타입 사용 annotation은 적용되는 유형의 바로 앞에 나타난다. 
<code class="language-plaintext highlighter-rouge">@Target(ElementType.TYPE_USE)</code>의 메타 annotation이 붙은 annotation은 타입 사용 annotation이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="nd">@Nullable</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

<span class="kd">public</span> <span class="nd">@Nullable</span> <span class="nc">Person</span> <span class="nf">getPersonByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>
</code></pre></div></div>

<h5 id="4852-class-annotation">4.8.5.2 class annotation</h5>

<p>class에 적용되는 annotation은 documentation 블록 바로 뒤에 나타나고 
각 annotation은 자체적인 한 줄로 나열된다(즉, 한 줄에 한 annotation). 
이러한 줄 바꿈은 들여쓰기 수준이 증가하지 않는다. 예시:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Deprecated</span>
<span class="nd">@CheckReturnValue</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Frozzler</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</code></pre></div></div>

<h5 id="4853-method와-constructor-annotation">4.8.5.3 method와 constructor annotation</h5>

<p>method와 constructor의 annotation에 대한 규칙은 이전 섹션(섹션 4.8.5.2)과 같다. 예시:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Deprecated</span>
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getNameIfPresent</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</code></pre></div></div>

<p>예외: 매개변수가 없는 하나의 annotation은 signature의 첫번째 줄가 함께 나타날 수 있다. 예시:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</code></pre></div></div>

<h5 id="48454-field-annotation">4.8.4.5.4 field annotation</h5>

<p>field에 적용되는 annotation 또한 documentation 블록 바로 뒤에 나타난다. 
하지만 이 경우 여러 개의 annotation(매개변수화 가능)은 같은 줄에 나열될 수 있다; 예시:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Partial</span> <span class="nd">@Mock</span> <span class="nc">DataLoader</span> <span class="n">loader</span><span class="o">;</span>
</code></pre></div></div>

<h5 id="4855-매개변수와-지역-변수-annotation">4.8.5.5 매개변수와 지역 변수 annotation</h5>

<p>매개변수나 지역변수의 annotation의 서식에 대해서는 특정한 규칙이 없다(물론 타입 사용 annotation일 때를 제외하고).</p>

<h4 id="486-주석">4.8.6 주석</h4>

<p>이 섹션에서는 구현 주석을 다룬다. Javadoc에 대한 것은 Section 7에 분리되어있다.</p>

<p>모든 줄바꿈 앞에 구현 주석이 뒤따르는 임의의 공백이 올 수 있다. 
이러한 주석은 공백이 아닌 줄로 표현한다.</p>

<h5 id="4861-블록-주석-형식">4.8.6.1 블록 주석 형식</h5>

<p>블록 주석은 주변 코드와 같은 수준으로 들여쓰기 된다. 
그것은 <code class="language-plaintext highlighter-rouge">/* ... */</code> 형식이나 <code class="language-plaintext highlighter-rouge">// ...</code> 형식일 수 있다. 
여러 줄 <code class="language-plaintext highlighter-rouge">/* ... */</code> 주석의 경우 이어지는 줄은 *로 시작해야 이전 줄의 *에 맞춰 정렬된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * This is          // And so           /* Or you can
 * okay.            // is this.          * even do this. */</span>
 <span class="o">*/</span>
</code></pre></div></div>

<p>주석은 별표나 다른 문자로 표현된 구간에 포함되지 않는다.</p>

<blockquote>
  <p>팁: 여러 줄의 주석을 작성할 때, 필요에 따라 줄을 다시 감싸기 위해 자동 코드 포맷터를 사용하길 원한다면 <code class="language-plaintext highlighter-rouge">/* ... */</code> 형식일 사용해라(단락 스타일). 
대부분의 포맷터는 <code class="language-plaintext highlighter-rouge">// ...</code> 형식의 주석 블록에서 줄을 다시 감싸지 않는다.</p>
</blockquote>

<h4 id="487-제어자">4.8.7 제어자</h4>

<p>class와 member 제어자가 존재한다면 그것은 Java 언어 명세가 권장하는 순서로 나타난다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public protected private abstract default static final transient volatile synchronized native strictfp
</code></pre></div></div>

<h4 id="488-숫자-literal">4.8.8 숫자 literal</h4>

<p>긴 값의 정수 literal은 대문자 L 접미사를 사용하고 소문자는 사용하지 않는다(숫자 1과의 혼동을 피하기 위해). 
예를 들어 <code class="language-plaintext highlighter-rouge">3000000000l</code>를 사용하지 않고 <code class="language-plaintext highlighter-rouge">3000000000L</code>를 사용한다.</p>

<h2 id="5-명명">5 명명</h2>

<h3 id="51-모든-식별자에-대한-공통-규칙">5.1 모든 식별자에 대한 공통 규칙</h3>

<p>식별자는 오직 ASCII 문자와 숫자만 사용하고 아래에 명시된 몇몇 경우에는 언더바를 사용한다. 
따라서 각각의 유효한 식별 명은 정규표현식 <code class="language-plaintext highlighter-rouge">\w+</code>를 따른다.</p>

<p>구글 스타일에서는 특정한 접미사나 접두사가 사용되지 않는다. 예를들어 <code class="language-plaintext highlighter-rouge">name_</code>, <code class="language-plaintext highlighter-rouge">mName</code>, <code class="language-plaintext highlighter-rouge">s_name</code>, <code class="language-plaintext highlighter-rouge">kName</code>은 구글 스타일이 아니다.</p>

<h3 id="52-식별자-유형별-규칙">5.2 식별자 유형별 규칙</h3>

<h4 id="521-package-명">5.2.1 package 명</h4>

<p>package 명은 오직 소문자와 숫자(<code class="language-plaintext highlighter-rouge">_</code> 제외)만 사용한다. 
연속적인 단어는 단순히 붙여서 쓴다. 
예를들어 <code class="language-plaintext highlighter-rouge">com.example.deepSpace</code> 혹은 <code class="language-plaintext highlighter-rouge">com.example.deep_space</code>가 아닌 <code class="language-plaintext highlighter-rouge">com.example.deepspace</code>를 사용한다.</p>

<h4 id="522-class-명">5.2.2 class 명</h4>

<p>class 명은 UpperCamelCase를 사용한다.</p>

<p>class 명은 일반적으로 명서 혹은 명사구이다. 예를들어 <code class="language-plaintext highlighter-rouge">Character</code> 혹은 <code class="language-plaintext highlighter-rouge">ImmutableList</code>와 같이 사용한다. 
interface 명 역시 명사 또는 명사구일 수 있지만 때때로 형용사나 형용사구일 수 있다(예, <code class="language-plaintext highlighter-rouge">Readable</code>).</p>

<p>annotation 타입 명명에 대한 특정 규칙이나 잘 정립된 약속은 없다.</p>

<p>테스트 class는 <code class="language-plaintext highlighter-rouge">HashIntegrationTest</code>와 같이 <code class="language-plaintext highlighter-rouge">Test</code>로 끝나는 이름을 갖는다. 
하나의 class에 대해 다룬다면 <code class="language-plaintext highlighter-rouge">HashImplTest</code>와 같이 class 명 뒤에 <code class="language-plaintext highlighter-rouge">Test</code>를 붙인 이름을 갖는다.</p>

<h4 id="523-method-명">5.2.3 method 명</h4>

<p>method 명은 lowerCamelCase를 사용한다.</p>

<p>method 명은 일반적으로 동사 혹은 동사구이다. 예를 들어 <code class="language-plaintext highlighter-rouge">sendMessage</code> 혹은 <code class="language-plaintext highlighter-rouge">stop</code> 같은 이름을 사용한다.</p>

<p>밑줄은 JUnit 테스트 method에서 이름의 논리적 요소를 나누기 위해 나타날 수 있다. 
<code class="language-plaintext highlighter-rouge">transferMoney_deductsFromSource</code>와 같이 각 요소는 lowerCamelCase로 쓰인다. 
테스트 method 명에 대해서는 적절한 한가지 방법이 존재하지 않는다.</p>

<h4 id="524-상수-명">5.2.4 상수 명</h4>

<p>상수 명은 <code class="language-plaintext highlighter-rouge">UPPER_SNAKE_CASE</code>를 사용한다: 대문자로 이루어지며 각 단어는 밑줄로 나누어 진다. 
상수란 정확히 무엇인가?</p>

<p>상수는 그 내용이 완전히 바뀌지 않고 method에 감지할 수 있는 부작용이 없는 static final field이다. 
그 예는 원시타입, 문자열, 변하지 않는 값을 가진 class 그리고 null로 설정된 모든 항목을 포함한다. 
인스턴스의 관찰 가능한 상태가 바뀔 수 있다면 그것은 상수가 아니다. 
그저 객체를 바꾸지 않겠다는 의도만으로는 충분하지 않다. 예시:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Constants</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">NUMBER</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="nc">ImmutableList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="no">NAMES</span> <span class="o">=</span> <span class="nc">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Ed"</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">);</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="no">AGES</span> <span class="o">=</span> <span class="nc">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Ed"</span><span class="o">,</span> <span class="mi">35</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">,</span> <span class="mi">32</span><span class="o">);</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="nc">Joiner</span> <span class="no">COMMA_JOINER</span> <span class="o">=</span> <span class="nc">Joiner</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="sc">','</span><span class="o">);</span> <span class="c1">// because Joiner is immutable</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="nc">SomeMutableType</span><span class="o">[]</span> <span class="no">EMPTY_ARRAY</span> <span class="o">=</span> <span class="o">{};</span>

<span class="c1">// Not constants</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="n">nonFinal</span> <span class="o">=</span> <span class="s">"non-final"</span><span class="o">;</span>
<span class="kd">final</span> <span class="nc">String</span> <span class="n">nonStatic</span> <span class="o">=</span> <span class="s">"non-static"</span><span class="o">;</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">mutableCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="nc">ImmutableSet</span><span class="o">&lt;</span><span class="nc">SomeMutableType</span><span class="o">&gt;</span> <span class="n">mutableElements</span> <span class="o">=</span> <span class="nc">ImmutableSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">mutable</span><span class="o">);</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="nc">ImmutableMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">SomeMutableType</span><span class="o">&gt;</span> <span class="n">mutableValues</span> <span class="o">=</span>
    <span class="nc">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Ed"</span><span class="o">,</span> <span class="n">mutableInstance</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">,</span> <span class="n">mutableInstance2</span><span class="o">);</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">MyClass</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
<span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">nonEmptyArray</span> <span class="o">=</span> <span class="o">{</span><span class="s">"these"</span><span class="o">,</span> <span class="s">"can"</span><span class="o">,</span> <span class="s">"change"</span><span class="o">};</span>
</code></pre></div></div>

<p>상수 명은 일반적으로 명사 혹은 명사구이다.</p>

<h4 id="525-비상수-field-명">5.2.5 비상수 field 명</h4>

<p>상수가 아닌 field 명(static이든 아니든)은 lowerCamelCase로 쓰인다.</p>

<p>일반적으로 명사 혹은 명사구이다. 
예를들어 <code class="language-plaintext highlighter-rouge">computedValues</code> 혹은 <code class="language-plaintext highlighter-rouge">index</code>를 사용한다.</p>

<h4 id="526-매개변수-명">5.2.6 매개변수 명</h4>

<p>매개변수 명은 lowerCamelCase를 사용한다.</p>

<p>public method에서 하나의 문자로 된 매개변수 명은 금지된다.</p>

<h4 id="527-지역-변수-명">5.2.7 지역 변수 명</h4>

<p>지역 변수 명은 lowerCamelCase를 사용한다.</p>

<p>final이고 불변이라 할지라도 지역 변수는 상수로 취급되지 않고 따라서 상수의 스타일을 사용하지 않는다.</p>

<h4 id="528-타입-변수-명">5.2.8 타입 변수 명</h4>

<p>각 타입 변수 명은 두 가지 형식 중 하나를 사용한다:</p>

<ul>
  <li>하나의 대문자, 선택적으로 한자리 숫자를 뒤에 붙일 수 있음 (예 - <code class="language-plaintext highlighter-rouge">E</code>, <code class="language-plaintext highlighter-rouge">T</code>, <code class="language-plaintext highlighter-rouge">X</code>, <code class="language-plaintext highlighter-rouge">T2</code>)</li>
  <li>class에서 사용하는 형태의 이름(Section 5.2.2)에 대문자 T를 결합한 형태(예: <code class="language-plaintext highlighter-rouge">RequestT</code>, <code class="language-plaintext highlighter-rouge">FooBarT</code>).</li>
</ul>

<h3 id="53-camel-case-정의">5.3 camel case: 정의</h3>

<p>약어나 “IPv6” 혹은 “iOS”와 같이 독특한 형태를 띠는 경우 영어 구를 camel case로 변환하는 방법이 하나보다 많을 수 있다. 
예측 가능성을 개선하기 위해 구글 스타일은 다음의 결정적인 체계를 지정한다.</p>

<p>산문 형태의 이름으로 시작하여:</p>

<ol>
  <li>구문을 순수 ASCII로 변환하고 아포스트로피를 제거한다. (“Müller’s algorithm” -&gt; “Muellers algorithm”)</li>
  <li>공백이나 모든 남아있는 구두점(일반적으로 하이픈)을 기준으로 단어들을 쪼갠다.
    <ul>
      <li>권장: 단어가 이미 일반적인 사용법에서 전통적인 camel-case를 따른다면 이를 구성 부분으로 나눈다 (“AdWords” -&gt; “ad words”). 
“iOS”와 같은 단어는 camel case가 아니다. 어떤 규칙에도 위배되므로 이 권장사항이 적용되지 않는다.</li>
    </ul>
  </li>
  <li>약어를 포함하여 모든 글자를 소문자로 바꾸고 다음의 첫번째 문자만 대문자로 지정한다:
    <ul>
      <li>… 각 단어, 이는 upper camel case 혹은</li>
      <li>… 첫 단어를 제외한 각 단어, 이는 lower camel case 가 된다.</li>
    </ul>
  </li>
  <li>마지막으로 모든 단어들을 하나의 식별자로 모은다.</li>
</ol>

<p>원래의 대소문자는 거의 완전히 무시되는 것에 주의하라.</p>

<blockquote>
  <p>참고: 일부 단어는 영어에서 모호하게 하이픈으로 연결된다. 
예를 들어 “nonempty”와 “non-empty”는 둘 다 허용되므로 method 명 또한 <code class="language-plaintext highlighter-rouge">checkNonempty</code>와 <code class="language-plaintext highlighter-rouge">checkNonEmpty</code> 모두 적절하다.</p>
</blockquote>]]></content><author><name>jyKim</name></author><category term="TDD," /><category term="CleanCode" /><category term="JAVA" /><summary type="html"><![CDATA[원본 문서]]></summary></entry><entry><title type="html">IntelliJ에서 JUnit 사용 시 설정</title><link href="/blog/tdd,/cleancode/2022/05/24/junit-intellij-setting.html" rel="alternate" type="text/html" title="IntelliJ에서 JUnit 사용 시 설정" /><published>2022-05-24T00:00:00+00:00</published><updated>2022-05-24T00:00:00+00:00</updated><id>/blog/tdd,/cleancode/2022/05/24/junit-intellij-setting</id><content type="html" xml:base="/blog/tdd,/cleancode/2022/05/24/junit-intellij-setting.html"><![CDATA[<p>클래스 내의 단일 메소드 실행 시 다음과 같은 오류가 난다면</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 containers and 1 tests were Method or class mismatch
</code></pre></div></div>

<p>*) Preferences -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle 에서</p>

<p>Build and run using과 Run tests using의 속성을 Intellij IDEA로 변경</p>]]></content><author><name>jyKim</name></author><category term="TDD," /><category term="CleanCode" /><category term="JUnit" /><category term="IntelliJ" /><summary type="html"><![CDATA[클래스 내의 단일 메소드 실행 시 다음과 같은 오류가 난다면]]></summary></entry><entry><title type="html">transient</title><link href="/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/16/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-transient.html" rel="alternate" type="text/html" title="transient" /><published>2022-05-16T00:00:00+00:00</published><updated>2022-05-16T00:00:00+00:00</updated><id>/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/16/%5B%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%5D-transient</id><content type="html" xml:base="/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/16/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-transient.html"><![CDATA[<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">transient</span> <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
</code></pre></div></div>

<p>변수 선언 시 사용<br />
일시적인 변수로 객체의 영구적인 상태에 저장되지 않음<br />
직렬화 시 변수 무시됨</p>

<h4 id="참고">참고</h4>
<p>https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.3.1.3</p>]]></content><author><name>jyKim</name></author><category term="자료구조" /><category term="JAVA" /><summary type="html"><![CDATA[private transient int i;]]></summary></entry><entry><title type="html">7. List Abstraction</title><link href="/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/16/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-List-Abstractions.html" rel="alternate" type="text/html" title="7. List Abstraction" /><published>2022-05-16T00:00:00+00:00</published><updated>2022-05-16T00:00:00+00:00</updated><id>/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/16/%5B%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%5D-List-Abstractions</id><content type="html" xml:base="/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/16/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-List-Abstractions.html"><![CDATA[<h4 id="참고-서적">참고 서적</h4>
<p>Michael T. Goodrich et al., 『Data Structures &amp; Algorithms in Java - 6th Edition, John Wiley &amp; Sons Singapore Pte.Ltd(2015)</p>

<h1 id="list-abstraction">List Abstraction</h1>

<h2 id="71-the-list-adt배열의-추상-자료형">7.1 The List ADT(배열의 추상 자료형)</h2>

<p>**) 추상 자료형 : 자료와 자료의 연산에 대한 내용, 구체적인 구현방법을 명시하지는 않는다.</p>

<ul>
  <li>size() : 배열의 요소 개수 반환</li>
  <li>isEmpty() : 배열이 비었는지여부를 boolean 값으로 반환</li>
  <li>get(i) : index가 i인 요소를 반환, i가 0과 size()-1 사이의 값이 아니라면 예외 반환</li>
  <li>set(i, e) : index가 i인 요소를 e로 치환하고 기존에 있던 요소를 반환, i가 0과 size()-1 사이의 값이 아니라면 예외 반환</li>
  <li>add(i, e) : index i에 새로운 요소 e를 삽입, 기존의 index i부터의 값들은 index가 한 칸씩 밀림, i가 0과 size()-1 사이의 값이 아니라면 예외 반환</li>
  <li>remove(i) : index i인 요소를 제거, 이후에 있던 값들은 앞으로 한칸씩 당겨짐, i가 0과 size()-1 사이의 값이 아니라면 예외 반환</li>
</ul>

<h2 id="72-array-기반-list">7.2 Array 기반 List</h2>

<p>array A(단순 배열, 고정 길이)에 대하여,</p>
<ul>
  <li>get(i), set(i, e)는 A[i]로 쉽게 접근할 수 있다. -&gt; O(1)</li>
  <li>add(i, e), remove(i)의 경우 이후의 값들을 앞으로 당기거나 뒤로 미는 작업이 필요하다 -&gt; O(n)</li>
</ul>

<h3 id="동적-array">동적 array</h3>

<p>처음에 배열 A는 특정 용량 N으로 지정되어있다. 배열이 가득 찬 상태에서 add가 발생하면 다음 단계를 실행한다.</p>
<ul>
  <li>더 큰 용량(보통 2N)의 배열 B를 할당한다.</li>
  <li>k=0에서 k=N-1까지 B[k] = A[k]를 실행한다.</li>
  <li>A = B로 세팅한다.</li>
  <li>A에 새로운 요소를 추가한다.</li>
</ul>

<p>**) 배열이 2n으로 늘어날 때는 일련의 push 메소드가 O(n)의 시간복잡도를 가지지만 상수(k)만큼 씩 고정으로 늘어날때는 Ω(n²)의 시간복잡도를 가지게 된다.</p>]]></content><author><name>jyKim</name></author><category term="자료구조" /><category term="JAVA" /><category term="Data Structures &amp; Algorithms in Java" /><summary type="html"><![CDATA[참고 서적 Michael T. Goodrich et al., 『Data Structures &amp; Algorithms in Java - 6th Edition, John Wiley &amp; Sons Singapore Pte.Ltd(2015)]]></summary></entry><entry><title type="html">4.Analysis Tools</title><link href="/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/11/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Analysis-Tools.html" rel="alternate" type="text/html" title="4.Analysis Tools" /><published>2022-05-11T00:00:00+00:00</published><updated>2022-05-11T00:00:00+00:00</updated><id>/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/11/%5B%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%5D-Analysis-Tools</id><content type="html" xml:base="/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/11/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Analysis-Tools.html"><![CDATA[<h4 id="참고-서적">참고 서적</h4>
<p>Michael T. Goodrich et al., 『Data Structures &amp; Algorithms in Java - 6th Edition, John Wiley &amp; Sons Singapore Pte.Ltd(2015)</p>

<h1 id="analysis-tools">Analysis Tools</h1>

<p>좋은 자료구조와 알고리즘을 판단하기 위한 척도로 <code class="language-plaintext highlighter-rouge">실행시간(running times)</code>을 사용</p>

<h2 id="4-1-empirical-analysis실증분석">4-1. Empirical Analysis(실증분석)</h2>

<p>간단한 방법은 실제 실행시켜서 경과된 시간을 확인하는 것</p>

<p>System.currentTimeMillis()는 <code class="language-plaintext highlighter-rouge">January 1, 1970 UTC</code>로부터 현재까지 지난 시간을 milliseconds로 나타내는 함수이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
<span class="cm">/* 알고리즘 실행 */</span>
<span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
<span class="kt">long</span> <span class="n">elapsed</span> <span class="o">=</span> <span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">;</span> <span class="c1">// 경과 시간 </span>
</code></pre></div></div>

<p>**) 매우 빠른 수행의 경우 <code class="language-plaintext highlighter-rouge">System.nanoTime()</code>을 사용할 수 있다.</p>

<p>다양한 크기의 입력 대하여 독립적인 실험이 수행되어야 한다.<br />
x축을 입력의 크기(n), y축을 실행시간(t)로 두어 입력 크기와 실행시간의 관계를 시각화할 수 있다.</p>

<p>하지만 위의 방법을 통한 측정은 실행 컴퓨터에 따라 다를 수 있고 심지어는 같은 컴퓨터여도 각각의 실행마다 다를 수 있다.<br />
이는 CPU(central processing unit)와 메모리를 여러 프로세스가 공유하기 때문이다.<br />
즉, 실행 시간은 테스트가 수행 될 때 컴퓨터에서 실행되고 있는 다른 프로세스에 의해 영향을 받는다.</p>

<p>따라서 해당 실험에서 각각의 정확한 실행시간을 신뢰할 수는 없지만 비슷한 환경에서 실행된다면 서로 다른 알고리즘의 비교에는 유의미하다.</p>

<p>**) String과 StringBuilder의 반복적으로 문자열 덧붙이는 작업의 실행시간을 비교하면 StringBuilder가 훨씬 빠름을 알 수 있다.</p>

<h3 id="문제">문제</h3>

<ol>
  <li>같은 하드웨어, 소프트웨어를 사용하지 않으면 직접적으로 두 개의 알고리즘을 비교할 수 없다.</li>
  <li>제한된 테스트 입력의 사용</li>
  <li>실행시간을 확인하기위해 알고리즘을 완전히 구현해야한다.</li>
</ol>

<h3 id="목표">목표</h3>

<ol>
  <li>하드웨어, 소프트웨어에 상관 없이 알고리즘을 비교 하도록</li>
  <li>실제 구현 없이 고수준의 기술(high-level description)로 평가하도록</li>
  <li>모든 가능한 입력을 고려하도록</li>
</ol>

<h3 id="--기본-연산-집계">-&gt; 기본 연산 집계</h3>

<h4 id="기본-연산-정의">기본 연산 정의</h4>

<ul>
  <li>변수에 값 할당</li>
  <li>객체 참조</li>
  <li>수학적 연산(ex. 두 수의 덧셈) 수행</li>
  <li>두 수의 비교</li>
  <li>인덱스로 배열의 단일 객체에 접근</li>
  <li>메소드 호출</li>
  <li>메소드 결과값 반환</li>
</ul>

<p>각 기본 연산의 실행 시간은 거의 비슷하다고 가정하면 알고리즘의 실행 시간은 수행하는 기본 연산의 총 개수에 비례한다고 볼 수 있다.</p>

<p>같은 크기의 입력이더라도 입력에 따라 실행시간이 다르다.<br />
평균 실행시간을 구하려면 가능한 모든 입력과 입력의 분포까지 고려해야하므로 <code class="language-plaintext highlighter-rouge">최악의 경우(Worst-Case)를 기준</code>으로 분석한다.</p>

<h2 id="4-2-일반-수학-함수">4-2. 일반 수학 함수</h2>

<table>
  <thead>
    <tr>
      <th>constant</th>
      <th>logarithm</th>
      <th>linear</th>
      <th>n-log-n</th>
      <th>quadratic</th>
      <th>cubic</th>
      <th>exponential</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>log n</td>
      <td>n</td>
      <td>n log n</td>
      <td>n<sup>2</sup></td>
      <td>n<sup>3</sup></td>
      <td>a<sup>n</sup></td>
    </tr>
  </tbody>
</table>

<p>오른쪽으로 갈수록 n이 늘어남에 따른 결과값 증가가 급격해진다.</p>

<h2 id="4-3-big-oh-표기법">4-3. Big-Oh 표기법</h2>

<p>정의 : 모든 정수 n &gt;= n<sub>0</sub>에 대하여 f(n) &lt;= cg(n)을 만족하는 실수 상수 c &gt; 0와 정수 상수 n<sub>0</sub> &gt;= 1가 존재한다면 f(n)은 O(g(n))이라고 한다.</p>

<p>(참고) n이 무한에 가까워질 때 더 커지는 항(높은 차수의 항)에 주목하여 g(n)을 찾을 수 있다.</p>

<p>**) 위 4-1에서 언급한 예시에서 String을 사용한 알고리즘은 O(n<sup>2</sup>)이며 StringBuilder를 사용한 알고리즘은 O(n)이다.</p>]]></content><author><name>jyKim</name></author><category term="자료구조" /><category term="JAVA" /><category term="Data Structures &amp; Algorithms in Java" /><summary type="html"><![CDATA[참고 서적 Michael T. Goodrich et al., 『Data Structures &amp; Algorithms in Java - 6th Edition, John Wiley &amp; Sons Singapore Pte.Ltd(2015)]]></summary></entry><entry><title type="html">Stack</title><link href="/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/02/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-stack.html" rel="alternate" type="text/html" title="Stack" /><published>2022-05-02T00:00:00+00:00</published><updated>2022-05-02T00:00:00+00:00</updated><id>/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/02/%5B%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%5D-stack</id><content type="html" xml:base="/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/02/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-stack.html"><![CDATA[<h2 id="stack">stack</h2>

<h3 id="javautilstack">java.util.stack</h3>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The Stack class represents a last-in-first-out (LIFO) stack of objects. 
It extends class Vector with five operations that allow a vector to be treated as a stack. 
The usual push and pop operations are provided, as well as a method to peek at the top item on the stack, 
a method to test for whether the stack is empty, and a method to search the stack for an item and discover how far it is from the top.
When a stack is first created, it contains no items.
A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, 
which should be used in preference to this class. For example:
    
   Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();
Since:
1.0
Author:
Jonathan Payne
</code></pre></div></div>

<ul>
  <li>stack은 마지막에 들어간 객체가 먼저 방출되는 구조(Last In First Out)이다.</li>
  <li>vector를 stack으로 다룰 수 있는 5가지 작업으로 vector를 상속받는다.</li>
  <li>일반적인 push와 pop 작업이 제공되며, 최상위 항목을 가지고 올 수 있는 method(peek), stack이 비어있는지 테스트하는 method, 한 아이템이 최상위(top)에서 얼마나 떨어져있는지 확인하는 method 또한 제공된다.</li>
  <li>stack이 처음 생성되었을 때에는 아이템을 하나도 가지고 있지 않는다.</li>
  <li>더 완전하고 일관된 LIFO stack 작업은 Deque 인터페이스와 그 구현체(ArrayDeque)로 제공되며, 해당 클래스가 우선적으로 사용되어야한다.</li>
</ul>

<h3 id="method">Method</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">public E push(E item)</code> : item을 stack의 최상단에 삽입한다. <code class="language-plaintext highlighter-rouge">Vector.addElement</code>와 정확히 같은 동작을 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">public synchronized E pop()</code> : stack 최상단의 item을 반환하고 삭제한다. stack이 비어있을 경우 <code class="language-plaintext highlighter-rouge">EmptyStackException</code>를 반환한다.</li>
  <li><code class="language-plaintext highlighter-rouge">public synchronized E peek()</code> : stack 최상단의 item을 반환한다. stack이 비어있을 경우 <code class="language-plaintext highlighter-rouge">EmptyStackException</code>를 반환한다.</li>
  <li><code class="language-plaintext highlighter-rouge">public boolean empty()</code> : stack이 비어있으면 true, 비어있지 않으면 false를 반환한다.</li>
  <li><code class="language-plaintext highlighter-rouge">public synchronized int search(Object o)</code> : 객체 o의 최상단으로부터의 위치를 반환한다. 최상단에 있으면 1, stack에 존재하지 않으면 -1을 반환한다.</li>
</ul>]]></content><author><name>jyKim</name></author><category term="자료구조" /><category term="배열" /><category term="JAVA" /><category term="JAVA API" /><summary type="html"><![CDATA[stack]]></summary></entry><entry><title type="html">Data Structures &amp;amp; Algorithms in Java 목차</title><link href="/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/02/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-ds&aj-index.html" rel="alternate" type="text/html" title="Data Structures &amp;amp; Algorithms in Java 목차" /><published>2022-05-02T00:00:00+00:00</published><updated>2022-05-02T00:00:00+00:00</updated><id>/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/02/%5B%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%5D-ds&amp;aj-index</id><content type="html" xml:base="/blog/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2022/05/02/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-ds&amp;aj-index.html"><![CDATA[<h3 id="참고-서적">참고 서적</h3>
<p>Michael T. Goodrich et al., 『Data Structures &amp; Algorithms in Java - 6th Edition, John Wiley &amp; Sons Singapore Pte.Ltd(2015)</p>

<h2 id="1-java-programming-basics">1. Java Programming Basics</h2>

<h2 id="2-object-oriented-design">2. Object-Oriented Design</h2>

<h2 id="3-arrays-and-linked-lists">3. Arrays and Linked Lists</h2>

<h2 id="4-analysis-tools"><a href="https://kjy11.github.io/blog/자료구조/2022/05/11/자료구조-Analysis-Tools.html">4. Analysis Tools</a></h2>

<h2 id="5-recursion">5. Recursion</h2>

<h2 id="6-stacks-and-queues">6. Stacks and Queues</h2>

<h2 id="7-list-abstractions"><a href="https://kjy11.github.io/blog/자료구조/2022/05/16/자료구조-List-Abstractions.html">7. List Abstractions</a></h2>

<h2 id="8-tree-structures">8. Tree Structures</h2>

<h2 id="9-heaps-and-priority-queues">9. Heaps and Priority Queues</h2>

<h2 id="10-hash-tables-maps-and-skip-lists">10. Hash Tables, Maps, and Skip Lists</h2>

<h2 id="11-search-tree-structures">11. Search Tree Structures</h2>

<h2 id="12-strings-and-dynamic-programming">12. Strings and Dynamic Programming</h2>

<h2 id="13-sorting-and-selection">13. Sorting and Selection</h2>

<h2 id="14-graphs">14. Graphs</h2>

<h2 id="15-additional-topics">15. Additional Topics</h2>]]></content><author><name>jyKim</name></author><category term="자료구조" /><category term="JAVA" /><category term="Data Structures &amp; Algorithms in Java" /><summary type="html"><![CDATA[참고 서적 Michael T. Goodrich et al., 『Data Structures &amp; Algorithms in Java - 6th Edition, John Wiley &amp; Sons Singapore Pte.Ltd(2015)]]></summary></entry><entry><title type="html">프로그래머스 - 크레인 인형뽑기 게임</title><link href="/blog/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/2022/04/28/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84.html" rel="alternate" type="text/html" title="프로그래머스 - 크레인 인형뽑기 게임" /><published>2022-04-28T00:00:00+00:00</published><updated>2022-04-28T00:00:00+00:00</updated><id>/blog/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/2022/04/28/%5B%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8%5D-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84</id><content type="html" xml:base="/blog/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/2022/04/28/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84.html"><![CDATA[<ul>
  <li>코딩테스트 연습 &gt; 2019 카카오 개발자 겨울 인턴십 &gt; 크레인 인형뽑기 게임<br />
<a href="https://programmers.co.kr/learn/courses/30/lessons/64061">https://programmers.co.kr/learn/courses/30/lessons/64061</a></li>
</ul>

<h2 id="내-풀이">내 풀이</h2>

<h3 id="접근">접근</h3>
<ol>
  <li>크레인이 위치하는 각 라인의 맨 위의 값을 가지고 오기 쉽게 라인별로 배열을 생성한다.</li>
  <li>가져온 값을 넣을 basket 배열을 생성한다.<br />
(처음에는 바로 직전값만 가지고 있으면 되지 않나 생각했지만 직전 값이 지워지면 또 그 전의 값을 가지고 와야하므로 배열로 저장한다.)</li>
  <li>주어진 moves의 값에 따라 라인별로 맨 위의 값(basket에 들어갈 값)을 가지고온다.</li>
  <li>basket 배열을 생성하고 직전에 들어간 값과 지금 들어갈 값을 비교한다.<br />
4-1. 크레인이 위치한 라인이 비어있다면 아무일도 일어나지 않는다.<br />
4-2. 비교한 값이 같지 않다면 basket에 값을 추가한다.<br />
4-3. 비교한 값이 같다면 직전에 들어간 값을 basket에서 제거한다.</li>
</ol>

<h3 id="코드">코드</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">board</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">moves</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">++)</span> <span class="o">{</span>
            <span class="n">lines</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">row</span> <span class="o">:</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">row</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
                    <span class="n">lines</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">row</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">basket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">line</span> <span class="o">:</span> <span class="n">moves</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">lines</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">doll</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">remove</span><span class="o">(</span><span class="n">lines</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">basket</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">basket</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">basket</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="n">doll</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">basket</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">basket</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                    <span class="n">answer</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">basket</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">doll</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="다른-풀이">다른 풀이</h2>
<h3 id="보완사항">보완사항</h3>
<ol>
  <li>상황에 맞는 자료구조를 쓰자.
    <ul>
      <li>주어진 조건에서 가장 마지막 값만을 사용하므로 <code class="language-plaintext highlighter-rouge">stack</code>을 사용할 수 있다.
 **)</li>
    </ul>
  </li>
  <li>주어진 입력을 가공하지 않고 바로 사용할 수 있는 방법을 생각해보자.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">board</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">moves</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">move</span> <span class="o">:</span> <span class="n">moves</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span> 
          <span class="c1">// 시간효율적인가?</span>
          <span class="c1">// 최대 크기가 30*30이므로 주어진 조건 내에서는 문제 없을 것으로 보인다.</span>
          <span class="c1">// input의 범위가 늘어난다고 해도 미리 배열을 생성해서 사용할 경우에도 이중 for문을 돌게되므로 비슷할 것.(O(n^2))</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">move</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">move</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]);</span>
            <span class="n">board</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">move</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
          <span class="o">}</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">move</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">;</span>
          <span class="o">}</span> <span class="k">else</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">move</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]);</span>
          <span class="n">board</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">move</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
          <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="관련-지식">관련 지식</h2>
<ul>
  <li><a href="https://kjy11.github.io/blog/자료구조/2022/05/02/자료구조-stack.html">stack</a></li>
</ul>]]></content><author><name>jyKim</name></author><category term="코딩테스트" /><category term="프로그래머스" /><category term="level1" /><category term="시뮬레이션" /><category term="JAVA" /><summary type="html"><![CDATA[코딩테스트 연습 &gt; 2019 카카오 개발자 겨울 인턴십 &gt; 크레인 인형뽑기 게임 https://programmers.co.kr/learn/courses/30/lessons/64061 내 풀이]]></summary></entry></feed>